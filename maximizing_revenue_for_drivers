{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3ee41a41",
   "metadata": {
    "papermill": {
     "duration": 0.011263,
     "end_time": "2025-07-01T13:22:55.392431",
     "exception": false,
     "start_time": "2025-07-01T13:22:55.381168",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Maximizing Revenue for Taxi Cab drivers through Payment Type Analysis\n",
    "\n",
    "## Problem Statement\n",
    "\n",
    "In the fast-paced taxi booking sector, maximizing the revenue for the driver is essential for long-term success and driver happiness. Our goal is to use data driven insights to maximize revenue streams for taxi drivers in order to meet this need. Our research aims to determine whether payment methods have an impact on fare pricing and understand the customer group that uses our prefered mode of payment.\n",
    "\n",
    "## Research Question\n",
    "\n",
    "Is there a relationship between the total fare amount and payment type and how can we nudge customers towards payment methods that generate higher revenue for driver without negatively impacting customer experience?\n",
    "\n",
    "## Objective\n",
    "\n",
    "To examine the relationship between total fare and preferred method of payment if any.\n",
    "We use descriptive statistics and hypothesis testing to extract useful information that can help drivers generate more cash. In particular we want to find out if there is a big difference in fares for those who pay through credit card vs those who pay in cash."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceea8990",
   "metadata": {
    "papermill": {
     "duration": 0.010087,
     "end_time": "2025-07-01T13:22:55.412452",
     "exception": false,
     "start_time": "2025-07-01T13:22:55.402365",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Loading Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c3e34d9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:22:55.434530Z",
     "iopub.status.busy": "2025-07-01T13:22:55.434134Z",
     "iopub.status.idle": "2025-07-01T13:22:59.913445Z",
     "shell.execute_reply": "2025-07-01T13:22:59.912403Z"
    },
    "papermill": {
     "duration": 4.492694,
     "end_time": "2025-07-01T13:22:59.915360",
     "exception": false,
     "start_time": "2025-07-01T13:22:55.422666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import scipy.stats as st\n",
    "\n",
    "from IPython.display import display, Markdown\n",
    "\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebd9d3e6",
   "metadata": {
    "papermill": {
     "duration": 0.008896,
     "end_time": "2025-07-01T13:22:59.933750",
     "exception": false,
     "start_time": "2025-07-01T13:22:59.924854",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Understanding the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48d9fd94",
   "metadata": {
    "papermill": {
     "duration": 0.009448,
     "end_time": "2025-07-01T13:22:59.952757",
     "exception": false,
     "start_time": "2025-07-01T13:22:59.943309",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "[Information about the Data]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa52edf1",
   "metadata": {
    "papermill": {
     "duration": 0.008826,
     "end_time": "2025-07-01T13:22:59.971104",
     "exception": false,
     "start_time": "2025-07-01T13:22:59.962278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "33315f37",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-01T13:22:59.991301Z",
     "iopub.status.busy": "2025-07-01T13:22:59.990746Z",
     "iopub.status.idle": "2025-07-01T13:23:00.131735Z",
     "shell.execute_reply": "2025-07-01T13:23:00.130585Z"
    },
    "papermill": {
     "duration": 0.153235,
     "end_time": "2025-07-01T13:23:00.133519",
     "exception": false,
     "start_time": "2025-07-01T13:22:59.980284",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n\\n# Input data files are available in the read-only \"../input/\" directory\\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\\n\\nd = {}\\nfor dirname, _, filenames in os.walk(\\'/kaggle/input\\'):\\n    for filename in filenames:\\n        d[filename] = pd.read_csv(os.path.join(dirname, filename))\\n\\ndf = d[\\'yellow_tripdata_2015-01.csv\\']\\n\\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \\n# You can also write temporary files to /kaggle/temp/, but they won\\'t be saved outside of the current session\\n\\n'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "d = {}\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        d[filename] = pd.read_csv(os.path.join(dirname, filename))\n",
    "\n",
    "df = d['yellow_tripdata_2015-01.csv']\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef262af6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:23:00.156032Z",
     "iopub.status.busy": "2025-07-01T13:23:00.155674Z",
     "iopub.status.idle": "2025-07-01T13:24:14.524849Z",
     "shell.execute_reply": "2025-07-01T13:24:14.523711Z"
    },
    "papermill": {
     "duration": 74.38354,
     "end_time": "2025-07-01T13:24:14.527174",
     "exception": false,
     "start_time": "2025-07-01T13:23:00.143634",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        if filename == 'yellow_tripdata_2015-01.csv':\n",
    "            df = pd.read_csv(os.path.join(dirname, filename))\n",
    "        else:\n",
    "            continue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f0994b",
   "metadata": {
    "papermill": {
     "duration": 0.009711,
     "end_time": "2025-07-01T13:24:14.547734",
     "exception": false,
     "start_time": "2025-07-01T13:24:14.538023",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Initial Examination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d4259685",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:14.568899Z",
     "iopub.status.busy": "2025-07-01T13:24:14.568553Z",
     "iopub.status.idle": "2025-07-01T13:24:14.609587Z",
     "shell.execute_reply": "2025-07-01T13:24:14.608607Z"
    },
    "papermill": {
     "duration": 0.053639,
     "end_time": "2025-07-01T13:24:14.611290",
     "exception": false,
     "start_time": "2025-07-01T13:24:14.557651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RateCodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-01-15 19:05:39</td>\n",
       "      <td>2015-01-15 19:23:42</td>\n",
       "      <td>1</td>\n",
       "      <td>1.59</td>\n",
       "      <td>-73.993896</td>\n",
       "      <td>40.750111</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.974785</td>\n",
       "      <td>40.750618</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:38</td>\n",
       "      <td>2015-01-10 20:53:28</td>\n",
       "      <td>1</td>\n",
       "      <td>3.30</td>\n",
       "      <td>-74.001648</td>\n",
       "      <td>40.724243</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.994415</td>\n",
       "      <td>40.759109</td>\n",
       "      <td>1</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:38</td>\n",
       "      <td>2015-01-10 20:43:41</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>-73.963341</td>\n",
       "      <td>40.802788</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.951820</td>\n",
       "      <td>40.824413</td>\n",
       "      <td>2</td>\n",
       "      <td>9.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:39</td>\n",
       "      <td>2015-01-10 20:35:31</td>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>-74.009087</td>\n",
       "      <td>40.713818</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.004326</td>\n",
       "      <td>40.719986</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:39</td>\n",
       "      <td>2015-01-10 20:52:58</td>\n",
       "      <td>1</td>\n",
       "      <td>3.00</td>\n",
       "      <td>-73.971176</td>\n",
       "      <td>40.762428</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.004181</td>\n",
       "      <td>40.742653</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID tpep_pickup_datetime tpep_dropoff_datetime  passenger_count  \\\n",
       "0         2  2015-01-15 19:05:39   2015-01-15 19:23:42                1   \n",
       "1         1  2015-01-10 20:33:38   2015-01-10 20:53:28                1   \n",
       "2         1  2015-01-10 20:33:38   2015-01-10 20:43:41                1   \n",
       "3         1  2015-01-10 20:33:39   2015-01-10 20:35:31                1   \n",
       "4         1  2015-01-10 20:33:39   2015-01-10 20:52:58                1   \n",
       "\n",
       "   trip_distance  pickup_longitude  pickup_latitude  RateCodeID  \\\n",
       "0           1.59        -73.993896        40.750111           1   \n",
       "1           3.30        -74.001648        40.724243           1   \n",
       "2           1.80        -73.963341        40.802788           1   \n",
       "3           0.50        -74.009087        40.713818           1   \n",
       "4           3.00        -73.971176        40.762428           1   \n",
       "\n",
       "  store_and_fwd_flag  dropoff_longitude  dropoff_latitude  payment_type  \\\n",
       "0                  N         -73.974785         40.750618             1   \n",
       "1                  N         -73.994415         40.759109             1   \n",
       "2                  N         -73.951820         40.824413             2   \n",
       "3                  N         -74.004326         40.719986             2   \n",
       "4                  N         -74.004181         40.742653             2   \n",
       "\n",
       "   fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0         12.0    1.0      0.5        3.25           0.0   \n",
       "1         14.5    0.5      0.5        2.00           0.0   \n",
       "2          9.5    0.5      0.5        0.00           0.0   \n",
       "3          3.5    0.5      0.5        0.00           0.0   \n",
       "4         15.0    0.5      0.5        0.00           0.0   \n",
       "\n",
       "   improvement_surcharge  total_amount  \n",
       "0                    0.3         17.05  \n",
       "1                    0.3         17.80  \n",
       "2                    0.3         10.80  \n",
       "3                    0.3          4.80  \n",
       "4                    0.3         16.30  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "64b488e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:14.634043Z",
     "iopub.status.busy": "2025-07-01T13:24:14.632955Z",
     "iopub.status.idle": "2025-07-01T13:24:14.640165Z",
     "shell.execute_reply": "2025-07-01T13:24:14.639157Z"
    },
    "papermill": {
     "duration": 0.019837,
     "end_time": "2025-07-01T13:24:14.641723",
     "exception": false,
     "start_time": "2025-07-01T13:24:14.621886",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12748986, 19)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae429bbf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:14.663820Z",
     "iopub.status.busy": "2025-07-01T13:24:14.663473Z",
     "iopub.status.idle": "2025-07-01T13:24:14.692796Z",
     "shell.execute_reply": "2025-07-01T13:24:14.691706Z"
    },
    "papermill": {
     "duration": 0.042286,
     "end_time": "2025-07-01T13:24:14.694562",
     "exception": false,
     "start_time": "2025-07-01T13:24:14.652276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12748986 entries, 0 to 12748985\n",
      "Data columns (total 19 columns):\n",
      " #   Column                 Dtype  \n",
      "---  ------                 -----  \n",
      " 0   VendorID               int64  \n",
      " 1   tpep_pickup_datetime   object \n",
      " 2   tpep_dropoff_datetime  object \n",
      " 3   passenger_count        int64  \n",
      " 4   trip_distance          float64\n",
      " 5   pickup_longitude       float64\n",
      " 6   pickup_latitude        float64\n",
      " 7   RateCodeID             int64  \n",
      " 8   store_and_fwd_flag     object \n",
      " 9   dropoff_longitude      float64\n",
      " 10  dropoff_latitude       float64\n",
      " 11  payment_type           int64  \n",
      " 12  fare_amount            float64\n",
      " 13  extra                  float64\n",
      " 14  mta_tax                float64\n",
      " 15  tip_amount             float64\n",
      " 16  tolls_amount           float64\n",
      " 17  improvement_surcharge  float64\n",
      " 18  total_amount           float64\n",
      "dtypes: float64(12), int64(4), object(3)\n",
      "memory usage: 1.8+ GB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45c1e376",
   "metadata": {
    "papermill": {
     "duration": 0.00993,
     "end_time": "2025-07-01T13:24:14.714815",
     "exception": false,
     "start_time": "2025-07-01T13:24:14.704885",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Collection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "365e4fe6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:14.736332Z",
     "iopub.status.busy": "2025-07-01T13:24:14.735975Z",
     "iopub.status.idle": "2025-07-01T13:24:26.489365Z",
     "shell.execute_reply": "2025-07-01T13:24:26.488431Z"
    },
    "papermill": {
     "duration": 11.766297,
     "end_time": "2025-07-01T13:24:26.491154",
     "exception": false,
     "start_time": "2025-07-01T13:24:14.724857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12748986 entries, 0 to 12748985\n",
      "Data columns (total 19 columns):\n",
      " #   Column                 Dtype         \n",
      "---  ------                 -----         \n",
      " 0   VendorID               int64         \n",
      " 1   tpep_pickup_datetime   datetime64[ns]\n",
      " 2   tpep_dropoff_datetime  datetime64[ns]\n",
      " 3   passenger_count        int64         \n",
      " 4   trip_distance          float64       \n",
      " 5   pickup_longitude       float64       \n",
      " 6   pickup_latitude        float64       \n",
      " 7   RateCodeID             int64         \n",
      " 8   store_and_fwd_flag     object        \n",
      " 9   dropoff_longitude      float64       \n",
      " 10  dropoff_latitude       float64       \n",
      " 11  payment_type           int64         \n",
      " 12  fare_amount            float64       \n",
      " 13  extra                  float64       \n",
      " 14  mta_tax                float64       \n",
      " 15  tip_amount             float64       \n",
      " 16  tolls_amount           float64       \n",
      " 17  improvement_surcharge  float64       \n",
      " 18  total_amount           float64       \n",
      "dtypes: datetime64[ns](2), float64(12), int64(4), object(1)\n",
      "memory usage: 1.8+ GB\n"
     ]
    }
   ],
   "source": [
    "df[\"tpep_pickup_datetime\"] = pd.to_datetime(df[\"tpep_pickup_datetime\"])\n",
    "df[\"tpep_dropoff_datetime\"] = pd.to_datetime(df[\"tpep_dropoff_datetime\"])\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "434b45ac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:26.513225Z",
     "iopub.status.busy": "2025-07-01T13:24:26.512887Z",
     "iopub.status.idle": "2025-07-01T13:24:26.803295Z",
     "shell.execute_reply": "2025-07-01T13:24:26.802137Z"
    },
    "papermill": {
     "duration": 0.303366,
     "end_time": "2025-07-01T13:24:26.805099",
     "exception": false,
     "start_time": "2025-07-01T13:24:26.501733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>RateCodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>2015-01-15 19:05:39</td>\n",
       "      <td>2015-01-15 19:23:42</td>\n",
       "      <td>1</td>\n",
       "      <td>1.59</td>\n",
       "      <td>-73.993896</td>\n",
       "      <td>40.750111</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.974785</td>\n",
       "      <td>40.750618</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.05</td>\n",
       "      <td>18.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:38</td>\n",
       "      <td>2015-01-10 20:53:28</td>\n",
       "      <td>1</td>\n",
       "      <td>3.30</td>\n",
       "      <td>-74.001648</td>\n",
       "      <td>40.724243</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.994415</td>\n",
       "      <td>40.759109</td>\n",
       "      <td>1</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.80</td>\n",
       "      <td>19.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:38</td>\n",
       "      <td>2015-01-10 20:43:41</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>-73.963341</td>\n",
       "      <td>40.802788</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.951820</td>\n",
       "      <td>40.824413</td>\n",
       "      <td>2</td>\n",
       "      <td>9.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>10.80</td>\n",
       "      <td>10.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:39</td>\n",
       "      <td>2015-01-10 20:35:31</td>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>-74.009087</td>\n",
       "      <td>40.713818</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.004326</td>\n",
       "      <td>40.719986</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>4.80</td>\n",
       "      <td>1.866667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 20:33:39</td>\n",
       "      <td>2015-01-10 20:52:58</td>\n",
       "      <td>1</td>\n",
       "      <td>3.00</td>\n",
       "      <td>-73.971176</td>\n",
       "      <td>40.762428</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-74.004181</td>\n",
       "      <td>40.742653</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.30</td>\n",
       "      <td>19.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748981</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 19:01:44</td>\n",
       "      <td>2015-01-10 19:05:40</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-73.951988</td>\n",
       "      <td>40.786217</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.953735</td>\n",
       "      <td>40.775162</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>7.55</td>\n",
       "      <td>3.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748982</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 19:01:44</td>\n",
       "      <td>2015-01-10 19:07:26</td>\n",
       "      <td>2</td>\n",
       "      <td>0.80</td>\n",
       "      <td>-73.982742</td>\n",
       "      <td>40.728184</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.974976</td>\n",
       "      <td>40.720013</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.80</td>\n",
       "      <td>5.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748983</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 19:01:44</td>\n",
       "      <td>2015-01-10 19:15:01</td>\n",
       "      <td>1</td>\n",
       "      <td>3.40</td>\n",
       "      <td>-73.979324</td>\n",
       "      <td>40.749550</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.969101</td>\n",
       "      <td>40.787800</td>\n",
       "      <td>2</td>\n",
       "      <td>13.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>14.30</td>\n",
       "      <td>13.283333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748984</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 19:01:44</td>\n",
       "      <td>2015-01-10 19:17:03</td>\n",
       "      <td>1</td>\n",
       "      <td>1.30</td>\n",
       "      <td>-73.999565</td>\n",
       "      <td>40.738483</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.981819</td>\n",
       "      <td>40.737652</td>\n",
       "      <td>1</td>\n",
       "      <td>10.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>13.55</td>\n",
       "      <td>15.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748985</th>\n",
       "      <td>1</td>\n",
       "      <td>2015-01-10 19:01:45</td>\n",
       "      <td>2015-01-10 19:07:33</td>\n",
       "      <td>1</td>\n",
       "      <td>0.70</td>\n",
       "      <td>-73.960350</td>\n",
       "      <td>40.766399</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>-73.968643</td>\n",
       "      <td>40.760777</td>\n",
       "      <td>2</td>\n",
       "      <td>5.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>6.30</td>\n",
       "      <td>5.800000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12748986 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "0                2  2015-01-15 19:05:39   2015-01-15 19:23:42   \n",
       "1                1  2015-01-10 20:33:38   2015-01-10 20:53:28   \n",
       "2                1  2015-01-10 20:33:38   2015-01-10 20:43:41   \n",
       "3                1  2015-01-10 20:33:39   2015-01-10 20:35:31   \n",
       "4                1  2015-01-10 20:33:39   2015-01-10 20:52:58   \n",
       "...            ...                  ...                   ...   \n",
       "12748981         1  2015-01-10 19:01:44   2015-01-10 19:05:40   \n",
       "12748982         1  2015-01-10 19:01:44   2015-01-10 19:07:26   \n",
       "12748983         1  2015-01-10 19:01:44   2015-01-10 19:15:01   \n",
       "12748984         1  2015-01-10 19:01:44   2015-01-10 19:17:03   \n",
       "12748985         1  2015-01-10 19:01:45   2015-01-10 19:07:33   \n",
       "\n",
       "          passenger_count  trip_distance  pickup_longitude  pickup_latitude  \\\n",
       "0                       1           1.59        -73.993896        40.750111   \n",
       "1                       1           3.30        -74.001648        40.724243   \n",
       "2                       1           1.80        -73.963341        40.802788   \n",
       "3                       1           0.50        -74.009087        40.713818   \n",
       "4                       1           3.00        -73.971176        40.762428   \n",
       "...                   ...            ...               ...              ...   \n",
       "12748981                2           1.00        -73.951988        40.786217   \n",
       "12748982                2           0.80        -73.982742        40.728184   \n",
       "12748983                1           3.40        -73.979324        40.749550   \n",
       "12748984                1           1.30        -73.999565        40.738483   \n",
       "12748985                1           0.70        -73.960350        40.766399   \n",
       "\n",
       "          RateCodeID store_and_fwd_flag  dropoff_longitude  dropoff_latitude  \\\n",
       "0                  1                  N         -73.974785         40.750618   \n",
       "1                  1                  N         -73.994415         40.759109   \n",
       "2                  1                  N         -73.951820         40.824413   \n",
       "3                  1                  N         -74.004326         40.719986   \n",
       "4                  1                  N         -74.004181         40.742653   \n",
       "...              ...                ...                ...               ...   \n",
       "12748981           1                  N         -73.953735         40.775162   \n",
       "12748982           1                  N         -73.974976         40.720013   \n",
       "12748983           1                  N         -73.969101         40.787800   \n",
       "12748984           1                  N         -73.981819         40.737652   \n",
       "12748985           1                  N         -73.968643         40.760777   \n",
       "\n",
       "          payment_type  fare_amount  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0                    1         12.0    1.0      0.5        3.25           0.0   \n",
       "1                    1         14.5    0.5      0.5        2.00           0.0   \n",
       "2                    2          9.5    0.5      0.5        0.00           0.0   \n",
       "3                    2          3.5    0.5      0.5        0.00           0.0   \n",
       "4                    2         15.0    0.5      0.5        0.00           0.0   \n",
       "...                ...          ...    ...      ...         ...           ...   \n",
       "12748981             1          5.5    0.0      0.5        1.25           0.0   \n",
       "12748982             1          6.0    0.0      0.5        2.00           0.0   \n",
       "12748983             2         13.5    0.0      0.5        0.00           0.0   \n",
       "12748984             1         10.5    0.0      0.5        2.25           0.0   \n",
       "12748985             2          5.5    0.0      0.5        0.00           0.0   \n",
       "\n",
       "          improvement_surcharge  total_amount   duration  \n",
       "0                           0.3         17.05  18.050000  \n",
       "1                           0.3         17.80  19.833333  \n",
       "2                           0.3         10.80  10.050000  \n",
       "3                           0.3          4.80   1.866667  \n",
       "4                           0.3         16.30  19.316667  \n",
       "...                         ...           ...        ...  \n",
       "12748981                    0.3          7.55   3.933333  \n",
       "12748982                    0.3          8.80   5.700000  \n",
       "12748983                    0.3         14.30  13.283333  \n",
       "12748984                    0.3         13.55  15.316667  \n",
       "12748985                    0.3          6.30   5.800000  \n",
       "\n",
       "[12748986 rows x 20 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['duration'] = df['tpep_dropoff_datetime'] - df['tpep_pickup_datetime']\n",
    "df['duration'] = df['duration'].dt.total_seconds()/60\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d9e929a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:26.828482Z",
     "iopub.status.busy": "2025-07-01T13:24:26.827784Z",
     "iopub.status.idle": "2025-07-01T13:24:26.970328Z",
     "shell.execute_reply": "2025-07-01T13:24:26.969554Z"
    },
    "papermill": {
     "duration": 0.155878,
     "end_time": "2025-07-01T13:24:26.971999",
     "exception": false,
     "start_time": "2025-07-01T13:24:26.816121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>18.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3.30</td>\n",
       "      <td>1</td>\n",
       "      <td>14.5</td>\n",
       "      <td>19.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2</td>\n",
       "      <td>9.5</td>\n",
       "      <td>10.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.866667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>3.00</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>19.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748981</th>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>3.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748982</th>\n",
       "      <td>2</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>5.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748983</th>\n",
       "      <td>1</td>\n",
       "      <td>3.40</td>\n",
       "      <td>2</td>\n",
       "      <td>13.5</td>\n",
       "      <td>13.283333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748984</th>\n",
       "      <td>1</td>\n",
       "      <td>1.30</td>\n",
       "      <td>1</td>\n",
       "      <td>10.5</td>\n",
       "      <td>15.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748985</th>\n",
       "      <td>1</td>\n",
       "      <td>0.70</td>\n",
       "      <td>2</td>\n",
       "      <td>5.5</td>\n",
       "      <td>5.800000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12748986 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          passenger_count  trip_distance  payment_type  fare_amount   duration\n",
       "0                       1           1.59             1         12.0  18.050000\n",
       "1                       1           3.30             1         14.5  19.833333\n",
       "2                       1           1.80             2          9.5  10.050000\n",
       "3                       1           0.50             2          3.5   1.866667\n",
       "4                       1           3.00             2         15.0  19.316667\n",
       "...                   ...            ...           ...          ...        ...\n",
       "12748981                2           1.00             1          5.5   3.933333\n",
       "12748982                2           0.80             1          6.0   5.700000\n",
       "12748983                1           3.40             2         13.5  13.283333\n",
       "12748984                1           1.30             1         10.5  15.316667\n",
       "12748985                1           0.70             2          5.5   5.800000\n",
       "\n",
       "[12748986 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[['passenger_count', 'trip_distance', 'payment_type', 'fare_amount', 'duration']]\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb907213",
   "metadata": {
    "papermill": {
     "duration": 0.010669,
     "end_time": "2025-07-01T13:24:27.071304",
     "exception": false,
     "start_time": "2025-07-01T13:24:27.060635",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "21059db4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:27.093914Z",
     "iopub.status.busy": "2025-07-01T13:24:27.093631Z",
     "iopub.status.idle": "2025-07-01T13:24:27.257358Z",
     "shell.execute_reply": "2025-07-01T13:24:27.256216Z"
    },
    "papermill": {
     "duration": 0.177064,
     "end_time": "2025-07-01T13:24:27.259096",
     "exception": false,
     "start_time": "2025-07-01T13:24:27.082032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "passenger_count    0\n",
       "trip_distance      0\n",
       "payment_type       0\n",
       "fare_amount        0\n",
       "duration           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for missing values\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "99966803",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:27.282401Z",
     "iopub.status.busy": "2025-07-01T13:24:27.282107Z",
     "iopub.status.idle": "2025-07-01T13:24:27.289352Z",
     "shell.execute_reply": "2025-07-01T13:24:27.288185Z"
    },
    "papermill": {
     "duration": 0.021144,
     "end_time": "2025-07-01T13:24:27.291160",
     "exception": false,
     "start_time": "2025-07-01T13:24:27.270016",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "passenger_count      int64\n",
       "trip_distance      float64\n",
       "payment_type         int64\n",
       "fare_amount        float64\n",
       "duration           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for right datatypes\n",
    "\n",
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "40623d00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:27.315977Z",
     "iopub.status.busy": "2025-07-01T13:24:27.315646Z",
     "iopub.status.idle": "2025-07-01T13:24:30.209083Z",
     "shell.execute_reply": "2025-07-01T13:24:30.207978Z"
    },
    "papermill": {
     "duration": 2.908036,
     "end_time": "2025-07-01T13:24:30.211063",
     "exception": false,
     "start_time": "2025-07-01T13:24:27.303027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7930427"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking for duplicate values\n",
    "\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cef5d039",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:30.236096Z",
     "iopub.status.busy": "2025-07-01T13:24:30.235805Z",
     "iopub.status.idle": "2025-07-01T13:24:33.300155Z",
     "shell.execute_reply": "2025-07-01T13:24:33.299249Z"
    },
    "papermill": {
     "duration": 3.0786,
     "end_time": "2025-07-01T13:24:33.301921",
     "exception": false,
     "start_time": "2025-07-01T13:24:30.223321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop_duplicates(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d8f4debd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.325078Z",
     "iopub.status.busy": "2025-07-01T13:24:33.324793Z",
     "iopub.status.idle": "2025-07-01T13:24:33.330780Z",
     "shell.execute_reply": "2025-07-01T13:24:33.329918Z"
    },
    "papermill": {
     "duration": 0.019109,
     "end_time": "2025-07-01T13:24:33.332237",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.313128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4818559, 5)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6fafaac",
   "metadata": {
    "papermill": {
     "duration": 0.010685,
     "end_time": "2025-07-01T13:24:33.354296",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.343611",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Univariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9af89423",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.378107Z",
     "iopub.status.busy": "2025-07-01T13:24:33.376897Z",
     "iopub.status.idle": "2025-07-01T13:24:33.389233Z",
     "shell.execute_reply": "2025-07-01T13:24:33.388321Z"
    },
    "papermill": {
     "duration": 0.02563,
     "end_time": "2025-07-01T13:24:33.390796",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.365166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1.59</td>\n",
       "      <td>1</td>\n",
       "      <td>12.0</td>\n",
       "      <td>18.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3.30</td>\n",
       "      <td>1</td>\n",
       "      <td>14.5</td>\n",
       "      <td>19.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>2</td>\n",
       "      <td>9.5</td>\n",
       "      <td>10.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>2</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.866667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>3.00</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>19.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748955</th>\n",
       "      <td>1</td>\n",
       "      <td>10.71</td>\n",
       "      <td>1</td>\n",
       "      <td>40.0</td>\n",
       "      <td>44.016667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748957</th>\n",
       "      <td>6</td>\n",
       "      <td>2.36</td>\n",
       "      <td>2</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.683333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748958</th>\n",
       "      <td>5</td>\n",
       "      <td>3.88</td>\n",
       "      <td>2</td>\n",
       "      <td>14.5</td>\n",
       "      <td>14.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748959</th>\n",
       "      <td>6</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1</td>\n",
       "      <td>11.5</td>\n",
       "      <td>15.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748962</th>\n",
       "      <td>5</td>\n",
       "      <td>2.62</td>\n",
       "      <td>1</td>\n",
       "      <td>12.5</td>\n",
       "      <td>16.533333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4818559 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          passenger_count  trip_distance  payment_type  fare_amount   duration\n",
       "0                       1           1.59             1         12.0  18.050000\n",
       "1                       1           3.30             1         14.5  19.833333\n",
       "2                       1           1.80             2          9.5  10.050000\n",
       "3                       1           0.50             2          3.5   1.866667\n",
       "4                       1           3.00             2         15.0  19.316667\n",
       "...                   ...            ...           ...          ...        ...\n",
       "12748955                1          10.71             1         40.0  44.016667\n",
       "12748957                6           2.36             2         17.0  26.683333\n",
       "12748958                5           3.88             2         14.5  14.166667\n",
       "12748959                6           1.69             1         11.5  15.900000\n",
       "12748962                5           2.62             1         12.5  16.533333\n",
       "\n",
       "[4818559 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cc35b164",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.415517Z",
     "iopub.status.busy": "2025-07-01T13:24:33.414447Z",
     "iopub.status.idle": "2025-07-01T13:24:33.459439Z",
     "shell.execute_reply": "2025-07-01T13:24:33.458577Z"
    },
    "papermill": {
     "duration": 0.058722,
     "end_time": "2025-07-01T13:24:33.460858",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.402136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "passenger_count\n",
       "1    0.522535\n",
       "2    0.186238\n",
       "5    0.101820\n",
       "3    0.075145\n",
       "6    0.072250\n",
       "4    0.040720\n",
       "0    0.001284\n",
       "9    0.000002\n",
       "8    0.000002\n",
       "7    0.000002\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking at categorical data\n",
    "\n",
    "df['passenger_count'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "cd9d792f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.485692Z",
     "iopub.status.busy": "2025-07-01T13:24:33.484681Z",
     "iopub.status.idle": "2025-07-01T13:24:33.637198Z",
     "shell.execute_reply": "2025-07-01T13:24:33.636211Z"
    },
    "papermill": {
     "duration": 0.166428,
     "end_time": "2025-07-01T13:24:33.638705",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.472277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "passenger_count\n",
       "1    0.523211\n",
       "2    0.186478\n",
       "5    0.101952\n",
       "3    0.075242\n",
       "6    0.072344\n",
       "4    0.040773\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[(df['passenger_count']>0) & (df['passenger_count']<7)]\n",
    "df['passenger_count'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1f94068b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.662527Z",
     "iopub.status.busy": "2025-07-01T13:24:33.662205Z",
     "iopub.status.idle": "2025-07-01T13:24:33.696668Z",
     "shell.execute_reply": "2025-07-01T13:24:33.695702Z"
    },
    "papermill": {
     "duration": 0.048373,
     "end_time": "2025-07-01T13:24:33.698275",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.649902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "payment_type\n",
       "1    6.029339e-01\n",
       "2    3.894546e-01\n",
       "3    5.500027e-03\n",
       "4    2.111031e-03\n",
       "5    4.155982e-07\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['payment_type'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8a8a35eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.723695Z",
     "iopub.status.busy": "2025-07-01T13:24:33.722863Z",
     "iopub.status.idle": "2025-07-01T13:24:33.864945Z",
     "shell.execute_reply": "2025-07-01T13:24:33.863859Z"
    },
    "papermill": {
     "duration": 0.156542,
     "end_time": "2025-07-01T13:24:33.866474",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.709932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "payment_type\n",
       "1    0.607558\n",
       "2    0.392442\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[df['payment_type']<3]\n",
    "df['payment_type'].value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "55465e99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:33.893901Z",
     "iopub.status.busy": "2025-07-01T13:24:33.892861Z",
     "iopub.status.idle": "2025-07-01T13:24:34.092837Z",
     "shell.execute_reply": "2025-07-01T13:24:34.091802Z"
    },
    "papermill": {
     "duration": 0.216284,
     "end_time": "2025-07-01T13:24:34.094446",
     "exception": false,
     "start_time": "2025-07-01T13:24:33.878162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1.59</td>\n",
       "      <td>Card</td>\n",
       "      <td>12.0</td>\n",
       "      <td>18.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3.30</td>\n",
       "      <td>Card</td>\n",
       "      <td>14.5</td>\n",
       "      <td>19.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>Cash</td>\n",
       "      <td>9.5</td>\n",
       "      <td>10.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0.50</td>\n",
       "      <td>Cash</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.866667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>3.00</td>\n",
       "      <td>Cash</td>\n",
       "      <td>15.0</td>\n",
       "      <td>19.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748955</th>\n",
       "      <td>1</td>\n",
       "      <td>10.71</td>\n",
       "      <td>Card</td>\n",
       "      <td>40.0</td>\n",
       "      <td>44.016667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748957</th>\n",
       "      <td>6</td>\n",
       "      <td>2.36</td>\n",
       "      <td>Cash</td>\n",
       "      <td>17.0</td>\n",
       "      <td>26.683333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748958</th>\n",
       "      <td>5</td>\n",
       "      <td>3.88</td>\n",
       "      <td>Cash</td>\n",
       "      <td>14.5</td>\n",
       "      <td>14.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748959</th>\n",
       "      <td>6</td>\n",
       "      <td>1.69</td>\n",
       "      <td>Card</td>\n",
       "      <td>11.5</td>\n",
       "      <td>15.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12748962</th>\n",
       "      <td>5</td>\n",
       "      <td>2.62</td>\n",
       "      <td>Card</td>\n",
       "      <td>12.5</td>\n",
       "      <td>16.533333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4775711 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          passenger_count  trip_distance payment_type  fare_amount   duration\n",
       "0                       1           1.59         Card         12.0  18.050000\n",
       "1                       1           3.30         Card         14.5  19.833333\n",
       "2                       1           1.80         Cash          9.5  10.050000\n",
       "3                       1           0.50         Cash          3.5   1.866667\n",
       "4                       1           3.00         Cash         15.0  19.316667\n",
       "...                   ...            ...          ...          ...        ...\n",
       "12748955                1          10.71         Card         40.0  44.016667\n",
       "12748957                6           2.36         Cash         17.0  26.683333\n",
       "12748958                5           3.88         Cash         14.5  14.166667\n",
       "12748959                6           1.69         Card         11.5  15.900000\n",
       "12748962                5           2.62         Card         12.5  16.533333\n",
       "\n",
       "[4775711 rows x 5 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['payment_type'].replace([1, 2], ['Card', 'Cash'], inplace = True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "47825eca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:34.120701Z",
     "iopub.status.busy": "2025-07-01T13:24:34.119776Z",
     "iopub.status.idle": "2025-07-01T13:24:34.955809Z",
     "shell.execute_reply": "2025-07-01T13:24:34.954902Z"
    },
    "papermill": {
     "duration": 0.851294,
     "end_time": "2025-07-01T13:24:34.957601",
     "exception": false,
     "start_time": "2025-07-01T13:24:34.106307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4.775711e+06</td>\n",
       "      <td>4.775711e+06</td>\n",
       "      <td>4.775711e+06</td>\n",
       "      <td>4.775711e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.235436e+00</td>\n",
       "      <td>3.249170e+01</td>\n",
       "      <td>1.765919e+01</td>\n",
       "      <td>2.288912e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.671725e+00</td>\n",
       "      <td>1.604972e+04</td>\n",
       "      <td>1.378450e+01</td>\n",
       "      <td>1.060785e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-4.500000e+02</td>\n",
       "      <td>-1.211017e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.660000e+00</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>9.966667e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.030000e+00</td>\n",
       "      <td>1.350000e+01</td>\n",
       "      <td>1.566667e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>5.800000e+00</td>\n",
       "      <td>2.150000e+01</td>\n",
       "      <td>2.310000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>1.542000e+07</td>\n",
       "      <td>4.008000e+03</td>\n",
       "      <td>5.485556e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       passenger_count  trip_distance   fare_amount      duration\n",
       "count     4.775711e+06   4.775711e+06  4.775711e+06  4.775711e+06\n",
       "mean      2.235436e+00   3.249170e+01  1.765919e+01  2.288912e+01\n",
       "std       1.671725e+00   1.604972e+04  1.378450e+01  1.060785e+03\n",
       "min       1.000000e+00   0.000000e+00 -4.500000e+02 -1.211017e+03\n",
       "25%       1.000000e+00   1.660000e+00  9.000000e+00  9.966667e+00\n",
       "50%       1.000000e+00   3.030000e+00  1.350000e+01  1.566667e+01\n",
       "75%       3.000000e+00   5.800000e+00  2.150000e+01  2.310000e+01\n",
       "max       6.000000e+00   1.542000e+07  4.008000e+03  5.485556e+05"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Looking at numerical data\n",
    "\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "32022072",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:34.983611Z",
     "iopub.status.busy": "2025-07-01T13:24:34.982669Z",
     "iopub.status.idle": "2025-07-01T13:24:36.356701Z",
     "shell.execute_reply": "2025-07-01T13:24:36.355505Z"
    },
    "papermill": {
     "duration": 1.388748,
     "end_time": "2025-07-01T13:24:36.358341",
     "exception": false,
     "start_time": "2025-07-01T13:24:34.969593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4.755645e+06</td>\n",
       "      <td>4.755645e+06</td>\n",
       "      <td>4.755645e+06</td>\n",
       "      <td>4.755645e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.237753e+00</td>\n",
       "      <td>3.262568e+01</td>\n",
       "      <td>1.759037e+01</td>\n",
       "      <td>2.291657e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.672876e+00</td>\n",
       "      <td>1.608354e+04</td>\n",
       "      <td>1.319540e+01</td>\n",
       "      <td>1.062298e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e-02</td>\n",
       "      <td>1.000000e-02</td>\n",
       "      <td>1.666667e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.670000e+00</td>\n",
       "      <td>9.000000e+00</td>\n",
       "      <td>1.001667e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>3.050000e+00</td>\n",
       "      <td>1.350000e+01</td>\n",
       "      <td>1.570000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>5.830000e+00</td>\n",
       "      <td>2.150000e+01</td>\n",
       "      <td>2.313333e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>1.542000e+07</td>\n",
       "      <td>4.008000e+03</td>\n",
       "      <td>5.485556e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       passenger_count  trip_distance   fare_amount      duration\n",
       "count     4.755645e+06   4.755645e+06  4.755645e+06  4.755645e+06\n",
       "mean      2.237753e+00   3.262568e+01  1.759037e+01  2.291657e+01\n",
       "std       1.672876e+00   1.608354e+04  1.319540e+01  1.062298e+03\n",
       "min       1.000000e+00   1.000000e-02  1.000000e-02  1.666667e-02\n",
       "25%       1.000000e+00   1.670000e+00  9.000000e+00  1.001667e+01\n",
       "50%       1.000000e+00   3.050000e+00  1.350000e+01  1.570000e+01\n",
       "75%       3.000000e+00   5.830000e+00  2.150000e+01  2.313333e+01\n",
       "max       6.000000e+00   1.542000e+07  4.008000e+03  5.485556e+05"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# taking positive values only\n",
    "df = df[df['trip_distance']>0]\n",
    "df = df[df['fare_amount']>0]\n",
    "df = df[df['duration']>0]\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "569cfc5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:36.385768Z",
     "iopub.status.busy": "2025-07-01T13:24:36.384605Z",
     "iopub.status.idle": "2025-07-01T13:24:37.692718Z",
     "shell.execute_reply": "2025-07-01T13:24:37.691700Z"
    },
    "papermill": {
     "duration": 1.32342,
     "end_time": "2025-07-01T13:24:37.694605",
     "exception": false,
     "start_time": "2025-07-01T13:24:36.371185",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x7fd1d9817010>,\n",
       "  <matplotlib.lines.Line2D at 0x7fd1d999cd90>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x7fd1b491fa90>,\n",
       "  <matplotlib.lines.Line2D at 0x7fd1b491d4d0>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x7fd1d999db90>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x7fd1b491e8d0>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x7fd1d999f250>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# outlier handling\n",
    "\n",
    "plt.boxplot(df['fare_amount'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cb0774e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:37.722104Z",
     "iopub.status.busy": "2025-07-01T13:24:37.721783Z",
     "iopub.status.idle": "2025-07-01T13:24:38.004871Z",
     "shell.execute_reply": "2025-07-01T13:24:38.003512Z"
    },
    "papermill": {
     "duration": 0.298968,
     "end_time": "2025-07-01T13:24:38.006713",
     "exception": false,
     "start_time": "2025-07-01T13:24:37.707745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in ['trip_distance', 'fare_amount', 'duration']:\n",
    "    q1 = df[col].quantile(0.25)\n",
    "    q3 = df[col].quantile(0.75)\n",
    "    iqr = q3-q1\n",
    "\n",
    "    lowerbound = q1 - 1.5 * iqr\n",
    "    upperbound = q3 + 1.5 * iqr\n",
    "    df = df[(df[col]>lowerbound) & (df[col]>upperbound)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e89ac5bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.033292Z",
     "iopub.status.busy": "2025-07-01T13:24:38.032965Z",
     "iopub.status.idle": "2025-07-01T13:24:38.043625Z",
     "shell.execute_reply": "2025-07-01T13:24:38.042726Z"
    },
    "papermill": {
     "duration": 0.025868,
     "end_time": "2025-07-01T13:24:38.045261",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.019393",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1335.000000\n",
       "mean       29.647738\n",
       "std        18.454101\n",
       "min        12.160000\n",
       "25%        18.955000\n",
       "50%        23.400000\n",
       "75%        33.400000\n",
       "max       181.960000\n",
       "Name: trip_distance, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['trip_distance'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "058a05a0",
   "metadata": {
    "papermill": {
     "duration": 0.0134,
     "end_time": "2025-07-01T13:24:38.072658",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.059258",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Multivariate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "08b69f23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.100838Z",
     "iopub.status.busy": "2025-07-01T13:24:38.099855Z",
     "iopub.status.idle": "2025-07-01T13:24:38.114424Z",
     "shell.execute_reply": "2025-07-01T13:24:38.113570Z"
    },
    "papermill": {
     "duration": 0.030169,
     "end_time": "2025-07-01T13:24:38.116023",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.085854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1365</th>\n",
       "      <td>1</td>\n",
       "      <td>21.40</td>\n",
       "      <td>Card</td>\n",
       "      <td>92.8</td>\n",
       "      <td>120.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4879</th>\n",
       "      <td>1</td>\n",
       "      <td>25.42</td>\n",
       "      <td>Card</td>\n",
       "      <td>115.5</td>\n",
       "      <td>137.633333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15716</th>\n",
       "      <td>1</td>\n",
       "      <td>12.40</td>\n",
       "      <td>Card</td>\n",
       "      <td>67.0</td>\n",
       "      <td>95.983333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29002</th>\n",
       "      <td>1</td>\n",
       "      <td>56.80</td>\n",
       "      <td>Card</td>\n",
       "      <td>234.0</td>\n",
       "      <td>81.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34170</th>\n",
       "      <td>1</td>\n",
       "      <td>33.14</td>\n",
       "      <td>Card</td>\n",
       "      <td>140.0</td>\n",
       "      <td>92.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12555465</th>\n",
       "      <td>1</td>\n",
       "      <td>66.91</td>\n",
       "      <td>Card</td>\n",
       "      <td>297.0</td>\n",
       "      <td>106.016667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12569858</th>\n",
       "      <td>1</td>\n",
       "      <td>21.72</td>\n",
       "      <td>Card</td>\n",
       "      <td>95.0</td>\n",
       "      <td>124.816667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12579612</th>\n",
       "      <td>2</td>\n",
       "      <td>19.30</td>\n",
       "      <td>Card</td>\n",
       "      <td>110.5</td>\n",
       "      <td>130.383333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12584963</th>\n",
       "      <td>1</td>\n",
       "      <td>68.76</td>\n",
       "      <td>Card</td>\n",
       "      <td>316.0</td>\n",
       "      <td>82.316667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12656947</th>\n",
       "      <td>1</td>\n",
       "      <td>13.40</td>\n",
       "      <td>Card</td>\n",
       "      <td>89.5</td>\n",
       "      <td>109.150000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>716 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          passenger_count  trip_distance payment_type  fare_amount    duration\n",
       "1365                    1          21.40         Card         92.8  120.916667\n",
       "4879                    1          25.42         Card        115.5  137.633333\n",
       "15716                   1          12.40         Card         67.0   95.983333\n",
       "29002                   1          56.80         Card        234.0   81.466667\n",
       "34170                   1          33.14         Card        140.0   92.050000\n",
       "...                   ...            ...          ...          ...         ...\n",
       "12555465                1          66.91         Card        297.0  106.016667\n",
       "12569858                1          21.72         Card         95.0  124.816667\n",
       "12579612                2          19.30         Card        110.5  130.383333\n",
       "12584963                1          68.76         Card        316.0   82.316667\n",
       "12656947                1          13.40         Card         89.5  109.150000\n",
       "\n",
       "[716 rows x 5 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['payment_type']=='Card']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2ee801f",
   "metadata": {
    "papermill": {
     "duration": 0.012478,
     "end_time": "2025-07-01T13:24:38.141732",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.129254",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Objective (i): \n",
    "Examine the relationship between total fare and method of payment. \n",
    "We use descriptive statistics here to extract useful information that can help drivers generate more cash. In particular we want to find out if there is a big difference in fares for those who pay through credit card vs those who pay in cash."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "32b55ca7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.169088Z",
     "iopub.status.busy": "2025-07-01T13:24:38.168756Z",
     "iopub.status.idle": "2025-07-01T13:24:38.191861Z",
     "shell.execute_reply": "2025-07-01T13:24:38.191009Z"
    },
    "papermill": {
     "duration": 0.038509,
     "end_time": "2025-07-01T13:24:38.193322",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.154813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">fare_amount</th>\n",
       "      <th colspan=\"2\" halign=\"left\">trip_distance</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>payment_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Card</th>\n",
       "      <td>112.144008</td>\n",
       "      <td>65.865062</td>\n",
       "      <td>30.315168</td>\n",
       "      <td>19.289920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cash</th>\n",
       "      <td>101.134120</td>\n",
       "      <td>48.443977</td>\n",
       "      <td>28.875719</td>\n",
       "      <td>17.421053</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             fare_amount            trip_distance           \n",
       "                    mean        std          mean        std\n",
       "payment_type                                                \n",
       "Card          112.144008  65.865062     30.315168  19.289920\n",
       "Cash          101.134120  48.443977     28.875719  17.421053"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('payment_type').agg(\n",
    "    {\n",
    "    'fare_amount': ['mean', 'std'],\n",
    "    'trip_distance': ['mean', 'std']\n",
    "    })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d81f0c51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.222685Z",
     "iopub.status.busy": "2025-07-01T13:24:38.221656Z",
     "iopub.status.idle": "2025-07-01T13:24:38.334461Z",
     "shell.execute_reply": "2025-07-01T13:24:38.333619Z"
    },
    "papermill": {
     "duration": 0.128417,
     "end_time": "2025-07-01T13:24:38.335960",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.207543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Preference of Payment Type(No of rides)\")\n",
    "plt.pie([\n",
    "            df[df['payment_type']=='Cash']['payment_type'].count(),\n",
    "            df[df['payment_type']=='Card']['payment_type'].count()],\n",
    "        labels = ['Cash', 'Card'], autopct='%1.1f%%', startangle=90, \n",
    "        colors = ['#FF5733', '#C70039'], explode = [0, 0.05],\n",
    "        wedgeprops = {\n",
    "            'edgecolor': 'black',\n",
    "            'linewidth': 2\n",
    "        })\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bfe6cd7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.366051Z",
     "iopub.status.busy": "2025-07-01T13:24:38.365655Z",
     "iopub.status.idle": "2025-07-01T13:24:38.468946Z",
     "shell.execute_reply": "2025-07-01T13:24:38.468107Z"
    },
    "papermill": {
     "duration": 0.120552,
     "end_time": "2025-07-01T13:24:38.470458",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.349906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Preference of Payment Type(Fare Amount)\")\n",
    "plt.pie([\n",
    "            df[df['payment_type']=='Cash']['fare_amount'].sum(),\n",
    "            df[df['payment_type']=='Card']['fare_amount'].sum()],\n",
    "        labels = ['Cash', 'Card'], autopct='%1.1f%%', startangle=90, \n",
    "        colors = ['#FF5733', '#C70039'], explode = [0, 0.05],\n",
    "        wedgeprops = {\n",
    "            'edgecolor': 'black',\n",
    "            'linewidth': 2\n",
    "        })\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0067c54a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.500033Z",
     "iopub.status.busy": "2025-07-01T13:24:38.498958Z",
     "iopub.status.idle": "2025-07-01T13:24:38.742941Z",
     "shell.execute_reply": "2025-07-01T13:24:38.741781Z"
    },
    "papermill": {
     "duration": 0.260453,
     "end_time": "2025-07-01T13:24:38.744641",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.484188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.title('fare_amount')\n",
    "plt.hist(df[df['payment_type']=='Card']['fare_amount'], bins = 25, label = 'Card', edgecolor = 'k', color = '#C70039')\n",
    "plt.hist(df[df['payment_type']=='Cash']['fare_amount'], bins = 25, label = 'Cash', edgecolor = 'k', color = '#FF5733')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23945922",
   "metadata": {
    "papermill": {
     "duration": 0.014275,
     "end_time": "2025-07-01T13:24:38.773301",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.759026",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Objective (ii):\n",
    "Examine the relationships preferred mode of payment and other factors(other than total fare) like customer count, trip duration or trip distance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "242c35e6",
   "metadata": {
    "papermill": {
     "duration": 0.013965,
     "end_time": "2025-07-01T13:24:38.801330",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.787365",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Payment Type and Customer Count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "05465db4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.831579Z",
     "iopub.status.busy": "2025-07-01T13:24:38.830843Z",
     "iopub.status.idle": "2025-07-01T13:24:38.848878Z",
     "shell.execute_reply": "2025-07-01T13:24:38.848026Z"
    },
    "papermill": {
     "duration": 0.034851,
     "end_time": "2025-07-01T13:24:38.850183",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.815332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_type</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>count</th>\n",
       "      <th>perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Card</td>\n",
       "      <td>1</td>\n",
       "      <td>490</td>\n",
       "      <td>36.704120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Card</td>\n",
       "      <td>2</td>\n",
       "      <td>122</td>\n",
       "      <td>9.138577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Card</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>2.397004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Card</td>\n",
       "      <td>4</td>\n",
       "      <td>22</td>\n",
       "      <td>1.647940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Card</td>\n",
       "      <td>5</td>\n",
       "      <td>31</td>\n",
       "      <td>2.322097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Card</td>\n",
       "      <td>6</td>\n",
       "      <td>19</td>\n",
       "      <td>1.423221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Cash</td>\n",
       "      <td>1</td>\n",
       "      <td>398</td>\n",
       "      <td>29.812734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Cash</td>\n",
       "      <td>2</td>\n",
       "      <td>111</td>\n",
       "      <td>8.314607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Cash</td>\n",
       "      <td>3</td>\n",
       "      <td>52</td>\n",
       "      <td>3.895131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Cash</td>\n",
       "      <td>4</td>\n",
       "      <td>12</td>\n",
       "      <td>0.898876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Cash</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>1.722846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Cash</td>\n",
       "      <td>6</td>\n",
       "      <td>23</td>\n",
       "      <td>1.722846</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   payment_type  passenger_count  count       perc\n",
       "0          Card                1    490  36.704120\n",
       "1          Card                2    122   9.138577\n",
       "2          Card                3     32   2.397004\n",
       "3          Card                4     22   1.647940\n",
       "4          Card                5     31   2.322097\n",
       "5          Card                6     19   1.423221\n",
       "6          Cash                1    398  29.812734\n",
       "7          Cash                2    111   8.314607\n",
       "8          Cash                3     52   3.895131\n",
       "9          Cash                4     12   0.898876\n",
       "10         Cash                5     23   1.722846\n",
       "11         Cash                6     23   1.722846"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_count = df.groupby(['payment_type', 'passenger_count'])[['passenger_count']].count()\n",
    "p_count.rename(columns = {'passenger_count': 'count'}, inplace=True)\n",
    "p_count['perc'] = (p_count['count']/p_count['count'].sum())*100\n",
    "p_count.reset_index(inplace=True)\n",
    "p_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "62dae608",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.879871Z",
     "iopub.status.busy": "2025-07-01T13:24:38.879561Z",
     "iopub.status.idle": "2025-07-01T13:24:38.890898Z",
     "shell.execute_reply": "2025-07-01T13:24:38.890002Z"
    },
    "papermill": {
     "duration": 0.028093,
     "end_time": "2025-07-01T13:24:38.892601",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.864508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "new_df = pd.DataFrame(\n",
    "    columns = ['payment_type', '1', '2', '3', '4', '5', '6'])\n",
    "new_df['payment_type'] = ['Cash', 'Card']\n",
    "new_df.iloc[0,1:] = p_count.iloc[6:,-1]\n",
    "new_df.iloc[1,1:] = p_count.iloc[0:6,-1]\n",
    "new_df['zero'] = [0, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a6b82220",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.926277Z",
     "iopub.status.busy": "2025-07-01T13:24:38.925961Z",
     "iopub.status.idle": "2025-07-01T13:24:38.936044Z",
     "shell.execute_reply": "2025-07-01T13:24:38.935253Z"
    },
    "papermill": {
     "duration": 0.027567,
     "end_time": "2025-07-01T13:24:38.937822",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.910255",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment_type</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>zero</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Cash</td>\n",
       "      <td>29.812734</td>\n",
       "      <td>8.314607</td>\n",
       "      <td>3.895131</td>\n",
       "      <td>0.898876</td>\n",
       "      <td>1.722846</td>\n",
       "      <td>1.722846</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Card</td>\n",
       "      <td>36.70412</td>\n",
       "      <td>9.138577</td>\n",
       "      <td>2.397004</td>\n",
       "      <td>1.64794</td>\n",
       "      <td>2.322097</td>\n",
       "      <td>1.423221</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  payment_type          1         2         3         4         5         6  \\\n",
       "0         Cash  29.812734  8.314607  3.895131  0.898876  1.722846  1.722846   \n",
       "1         Card   36.70412  9.138577  2.397004   1.64794  2.322097  1.423221   \n",
       "\n",
       "   zero  \n",
       "0     0  \n",
       "1     0  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f63ba3d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:38.971028Z",
     "iopub.status.busy": "2025-07-01T13:24:38.970731Z",
     "iopub.status.idle": "2025-07-01T13:24:39.146929Z",
     "shell.execute_reply": "2025-07-01T13:24:39.145862Z"
    },
    "papermill": {
     "duration": 0.194486,
     "end_time": "2025-07-01T13:24:39.148692",
     "exception": false,
     "start_time": "2025-07-01T13:24:38.954206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title('Payment Type and Customer Count Breakup')\n",
    "plt.xlabel('Fare Amount')\n",
    "plt.yticks([0, 1], new_df['payment_type'])\n",
    "\n",
    "color_list = ['#DAF7A6', '#FFC300', '#FF5733', '#C70039', '#900C3F', '#581845']\n",
    "\n",
    "passenger_count_sum = new_df['zero']\n",
    "\n",
    "for segment_color in color_list:\n",
    "    passenger_count = new_df[str((color_list.index(segment_color))+1)]\n",
    "    plt.barh(y = [0, 1], width = passenger_count,\n",
    "             left = passenger_count_sum,\n",
    "             color = segment_color, \n",
    "             label = str(color_list.index(segment_color)+1))\n",
    "    passenger_count_sum = passenger_count_sum + passenger_count\n",
    "    \n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4e16cf66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:39.182262Z",
     "iopub.status.busy": "2025-07-01T13:24:39.181253Z",
     "iopub.status.idle": "2025-07-01T13:24:39.383376Z",
     "shell.execute_reply": "2025-07-01T13:24:39.382500Z"
    },
    "papermill": {
     "duration": 0.219897,
     "end_time": "2025-07-01T13:24:39.384935",
     "exception": false,
     "start_time": "2025-07-01T13:24:39.165038",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Card by passenger count\")\n",
    "plt.pie(\n",
    "        df[df['payment_type']=='Card']['passenger_count'].value_counts(),\n",
    "        labels = [1, 2, 3, 4, 5, 6], startangle=90, \n",
    "        colors = ['#DAF7A6', '#FFC300', '#FF5733', '#C70039', '#900C3F', '#581845'],\n",
    "        wedgeprops = {\n",
    "            'edgecolor': 'black',\n",
    "            'linewidth': 2\n",
    "        })\n",
    "plt.show()\n",
    "\n",
    "plt.title(\"Cash by passenger count\")\n",
    "plt.pie(\n",
    "        df[df['payment_type']=='Cash']['passenger_count'].value_counts(),\n",
    "        labels = [1, 2, 3, 4, 5, 6], startangle=90, \n",
    "        colors = ['#DAF7A6', '#FFC300', '#FF5733', '#C70039', '#900C3F', '#581845'],\n",
    "        wedgeprops = {\n",
    "            'edgecolor': 'black',\n",
    "            'linewidth': 2\n",
    "        })\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95647fda",
   "metadata": {
    "papermill": {
     "duration": 0.017356,
     "end_time": "2025-07-01T13:24:39.418969",
     "exception": false,
     "start_time": "2025-07-01T13:24:39.401613",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Payment Type and Trip Distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1a0c3c66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:39.455345Z",
     "iopub.status.busy": "2025-07-01T13:24:39.455012Z",
     "iopub.status.idle": "2025-07-01T13:24:39.697645Z",
     "shell.execute_reply": "2025-07-01T13:24:39.696484Z"
    },
    "papermill": {
     "duration": 0.263164,
     "end_time": "2025-07-01T13:24:39.699438",
     "exception": false,
     "start_time": "2025-07-01T13:24:39.436274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.title('trip_distance')\n",
    "plt.hist(df[df['payment_type']=='Card']['trip_distance'], bins = 25, label = 'Card', edgecolor = 'k', color = '#C70039')\n",
    "plt.hist(df[df['payment_type']=='Cash']['trip_distance'], bins = 25, label = 'Cash', edgecolor = 'k', color = '#FF5733')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "0baecbf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:39.737940Z",
     "iopub.status.busy": "2025-07-01T13:24:39.737605Z",
     "iopub.status.idle": "2025-07-01T13:24:39.828339Z",
     "shell.execute_reply": "2025-07-01T13:24:39.827158Z"
    },
    "papermill": {
     "duration": 0.112521,
     "end_time": "2025-07-01T13:24:39.830107",
     "exception": false,
     "start_time": "2025-07-01T13:24:39.717586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZ8AAAGbCAYAAAAbc52CAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABlrUlEQVR4nO3dd3gU1f7H8fem90oILQRCCAFCM1RpSpEOKsrVK0UBRQEV9QrWq1hBxSso5SJcRNCfCkiR3kWKIEF6J5RQEyCN9Oye3x+bDFkSEgLJTpL9vp6Hh92Z2ck3yWY+O2fOnGNQSimEEEIIK7LTuwAhhBC2R8JHCCGE1Un4CCGEsDoJHyGEEFYn4SOEEMLqJHyEEEJYnYSPEEIIq5PwEUIIYXUSPkIIIazOZsLn888/JyQkBHt7e5o2bap3OeXGvHnzCA8Px9HRER8fH73LEVa2a9cunJycOHv27D3v68yZMxgMBr777rt7L+we1KpVi6efflrXGqzl2rVruLu7s3LlSr1LyUe38Pnuu+8wGAzaPxcXF8LCwhg9ejRXrlwp0a+1du1axo4dS9u2bZkzZw6ffPJJie6/ojp69ChPP/00derU4dtvv2XmzJm33fb999+3+H26ubnRoEED3nnnHZKSkqxYtb4uXrzI+++/z969e4vcNu/Pq7B/mzdvLvW6b+ftt9/mySefJDg4ON/f7O3+1apVy2r1PfDAA9rXtbOzw8vLi3r16jFo0CDWrVtXYl9n5cqVvP/++yW2P2vx9/dn+PDhvPvuu3qXko+D3gV88MEH1K5dm/T0dLZu3cr06dNZuXIlBw8exM3NrUS+xsaNG7Gzs2P27Nk4OTmVyD5twebNmzGZTEyePJnQ0NA7es306dPx8PDgxo0brF27lo8//piNGzeybds2DAZDKVesv4sXLzJ+/Hhq1apV5Bn2vHnzLJ5///33rFu3Lt/y+vXrl3SZd2Tv3r2sX7+e7du3A9ChQ4d8tQ0fPpyWLVvy3HPPacs8PDwK3F9wcDBpaWk4OjqWaJ01atTg008/BSAlJYWTJ0/y66+/Mn/+fAYMGMD8+fMtvuaxY8ewsyve5+6VK1cyderUchlAzz//PFOmTGHjxo106tRJ73JuUjqZM2eOAtRff/1lsfzVV19VgPrxxx9v+9obN24U62s988wzyt3d/a7qvJ2UlJQS3V9ZNH78eAWouLi4Ird97733Ctz20UcfVYDavn17aZVZpvz1118KUHPmzCn2a0eNGqV0/JPM56WXXlI1a9ZUJpPpttu4u7urIUOGFLqfrKwslZGRUcLVmXXs2FE1bNgw3/Ls7Gw1cuRIBaixY8fe89cpa7+b4oqIiFCDBg3SuwwLZe6aT24ynz59GoCnn34aDw8PTp06Rc+ePfH09OSpp54CwGQy8dVXX9GwYUNcXFwIDAxkxIgRxMfHa/szGAzMmTOHlJQU7fQ8b5vz/PnziYyMxNXVFT8/P5544gliYmIsanrggQeIiIggKiqKDh064ObmxltvvQVARkYG7733HqGhoTg7OxMUFMTYsWPJyMiw2IfBYGD06NEsWbKEiIgInJ2dadiwIatXr873M7hw4QLDhg2jWrVqODs7U7t2bV544QUyMzO1bRISEhgzZgxBQUE4OzsTGhrKxIkTMZlMd/RznjZtGg0bNsTZ2Zlq1aoxatQoEhIStPW1atXivffeAyAgIACDwXBXn/ry/j4zMzP597//TWRkJN7e3ri7u9O+fXs2bdqkba+UolatWvTr1y/fvtLT0/H29mbEiBGA+czMYDDwyy+/MH78eKpXr46npyePPfYYiYmJZGRkMGbMGCpXroyHhwfPPPNMvt8LFO89cPjwYR588EHc3NyoXr06n332mbbN5s2badGiBQDPPPNMge+34hgyZAiVKlUiKysr37qHHnqIevXqac9z318//PAD9erVw8XFhcjISLZs2ZLvtRcuXGDo0KEEBgZq78P//e9/+bZbsmQJnTp1KtYZa+51nS+++IKvvvqKOnXq4OzszOHDhwu85pP79x0dHU23bt1wd3enWrVqfPDBB6h7GHDf3t6eKVOm0KBBA7755hsSExO1dbde88nKymL8+PHUrVsXFxcX/P39adeundZs9/TTTzN16lTAsqk01xdffMH999+Pv78/rq6uREZGsnDhwnw16XkM6Nq1K7/99ts9/UxLnF6pd7szn8mTJytAzZgxQyml1JAhQ5Szs7OqU6eOGjJkiJoxY4b6/vvvlVJKDR8+XDk4OKhnn31WzZgxQ40bN065u7urFi1aqMzMTKWUUvPmzVPt27dXzs7Oat68eWrevHnq1KlTSimlPvroI2UwGNQ//vEPNW3aNDV+/HhVqVIlVatWLRUfH6/V1LFjR1WlShUVEBCg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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Preference of Payment Type(Trip Distance)\")\n",
    "plt.pie([\n",
    "            df[df['payment_type']=='Cash']['trip_distance'].sum(),\n",
    "            df[df['payment_type']=='Card']['trip_distance'].sum()],\n",
    "        labels = ['Cash', 'Card'], autopct='%1.1f%%', startangle=90, \n",
    "        colors = ['#FF5733', '#C70039'], explode = [0, 0.05],\n",
    "        wedgeprops = {\n",
    "            'edgecolor': 'black',\n",
    "            'linewidth': 2\n",
    "        })\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9454873c",
   "metadata": {
    "papermill": {
     "duration": 0.017052,
     "end_time": "2025-07-01T13:24:39.864910",
     "exception": false,
     "start_time": "2025-07-01T13:24:39.847858",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Payment Type and Duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ca131c53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:39.901842Z",
     "iopub.status.busy": "2025-07-01T13:24:39.901034Z",
     "iopub.status.idle": "2025-07-01T13:24:40.140874Z",
     "shell.execute_reply": "2025-07-01T13:24:40.139520Z"
    },
    "papermill": {
     "duration": 0.26053,
     "end_time": "2025-07-01T13:24:40.142521",
     "exception": false,
     "start_time": "2025-07-01T13:24:39.881991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.title('duration')\n",
    "plt.hist(df[(df['payment_type']=='Card')]['duration'], bins = 25, label = 'Card', edgecolor = 'k', color = '#C70039')\n",
    "plt.hist(df[(df['payment_type']=='Cash')]['duration'], bins = 25, label = 'Cash', edgecolor = 'k', color = '#FF5733')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "776b3b85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:40.182655Z",
     "iopub.status.busy": "2025-07-01T13:24:40.181325Z",
     "iopub.status.idle": "2025-07-01T13:24:40.270841Z",
     "shell.execute_reply": "2025-07-01T13:24:40.269783Z"
    },
    "papermill": {
     "duration": 0.111266,
     "end_time": "2025-07-01T13:24:40.272731",
     "exception": false,
     "start_time": "2025-07-01T13:24:40.161465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"Preference of Payment Type(Duration)\")\n",
    "plt.pie([\n",
    "            df[df['payment_type']=='Cash']['duration'].sum(),\n",
    "            df[df['payment_type']=='Card']['duration'].sum()],\n",
    "        labels = ['Cash', 'Card'], autopct='%1.1f%%', startangle=90, \n",
    "        colors = ['#FF5733', '#C70039'], explode = [0, 0.05],\n",
    "        wedgeprops = {\n",
    "            'edgecolor': 'black',\n",
    "            'linewidth': 2\n",
    "        })\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "413e2306",
   "metadata": {
    "papermill": {
     "duration": 0.019222,
     "end_time": "2025-07-01T13:24:40.311966",
     "exception": false,
     "start_time": "2025-07-01T13:24:40.292744",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# A/B Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fcfb3df",
   "metadata": {
    "papermill": {
     "duration": 0.018842,
     "end_time": "2025-07-01T13:24:40.350109",
     "exception": false,
     "start_time": "2025-07-01T13:24:40.331267",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TEST 1\n",
    "\n",
    "1. Is there a statistically significant difference in average fares for those who pay through credit card vs those who pay in cash? How big is the difference with a 95% CI?\n",
    "\n",
    "(i) In general\n",
    "\n",
    "(ii) (a) for short trips, (b) for long trips\n",
    "\n",
    "(iii) (a) passengers <= 4, (b) passangers > 4\n",
    "\n",
    "(iv) \n",
    "\n",
    "(a) for short trips and passengers <= 4 (intracity, 4 seaters)\n",
    "\n",
    "(b) for long trips and passengers <= 4 (intercity, 4 seaters)\n",
    "\n",
    "(c) for short trips and passengers > 4 (intracity, large groups)\n",
    "\n",
    "(d) for long trips and passengers > 4 (intercity, large groups)\n",
    "\n",
    "2. Is the variance in fares for those who pay through credit card vs those who pay in cash smaller? How much? (Do credit cards target more higher ticket customers than cash?)\n",
    "\n",
    "## SUBTEST 1\n",
    "\n",
    "H_null: meu_credit_card_fares - meu_cash_fares = 0\n",
    "\n",
    "H_alternate: meu_credit_fares - meu_cash_fares > 0\n",
    "\n",
    "## SUBTEST 2\n",
    "\n",
    "H_null: sigma_cash_fares / sigma_credit_card_fares = 1\n",
    "\n",
    "H_alternate: sigma_cash_fares / sigma_credit_card_fares > 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "080438a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:40.390428Z",
     "iopub.status.busy": "2025-07-01T13:24:40.389329Z",
     "iopub.status.idle": "2025-07-01T13:24:40.566565Z",
     "shell.execute_reply": "2025-07-01T13:24:40.565619Z"
    },
    "papermill": {
     "duration": 0.19914,
     "end_time": "2025-07-01T13:24:40.568213",
     "exception": false,
     "start_time": "2025-07-01T13:24:40.369073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#checking the shape of the sample\n",
    "\n",
    "st.probplot(df['fare_amount'], dist = 'norm', plot=plt)\n",
    "plt.title(\"Q-Q PLOT\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "96c3929c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:40.608033Z",
     "iopub.status.busy": "2025-07-01T13:24:40.607723Z",
     "iopub.status.idle": "2025-07-01T13:24:40.627518Z",
     "shell.execute_reply": "2025-07-01T13:24:40.626318Z"
    },
    "papermill": {
     "duration": 0.041984,
     "end_time": "2025-07-01T13:24:40.629359",
     "exception": false,
     "start_time": "2025-07-01T13:24:40.587375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 3.5079969857379236\n",
      "p value: 0.0002334428394025125\n",
      "Credit fare exceeds cash fare\n",
      "Credit card fares exceed cash fares by at least $5.843817116865957 with 0.95% confidence\n",
      "Levene's Statistic: 13.061302995762729\n",
      "p-value: 0.0003126814487854241\n",
      "Reject the null hypothesis: variances are significantly different.\n",
      "Variance of credit fares:  4338.20642181252\n",
      "Variance of cash fares:  2346.818928147499\n"
     ]
    }
   ],
   "source": [
    "# 1(i)\n",
    "\n",
    "# Separating the groups (in general)\n",
    "credit_fare = df[df['payment_type']=='Card']['fare_amount']\n",
    "cash_fare = df[df['payment_type']=='Cash']['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare, cash_fare, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "# Print the results\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "# Interpretation\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {1-alpha}% confidence')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare')\n",
    "\n",
    "\n",
    "# 2(i)\n",
    "\n",
    "# Using Levene's test\n",
    "levene_statistic, levene_p_value = st.levene(cash_fare, credit_fare)\n",
    "\n",
    "# Print the results\n",
    "print(\"Levene's Statistic:\", levene_statistic)\n",
    "print(\"p-value:\", levene_p_value)\n",
    "\n",
    "# Interpretation\n",
    "alpha = 0.05\n",
    "if levene_p_value < alpha:\n",
    "    print(\"Reject the null hypothesis: variances are significantly different.\")\n",
    "else:\n",
    "    print(\"Fail to reject the null hypothesis: variances are not significantly different.\")\n",
    "\n",
    "print(\"Variance of credit fares: \", np.var(credit_fare, ddof=1))\n",
    "print(\"Variance of cash fares: \", np.var(cash_fare, ddof=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fe94b659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:40.668814Z",
     "iopub.status.busy": "2025-07-01T13:24:40.668400Z",
     "iopub.status.idle": "2025-07-01T13:24:41.023657Z",
     "shell.execute_reply": "2025-07-01T13:24:41.022585Z"
    },
    "papermill": {
     "duration": 0.377471,
     "end_time": "2025-07-01T13:24:41.025562",
     "exception": false,
     "start_time": "2025-07-01T13:24:40.648091",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean:  29.647737827715353\n"
     ]
    }
   ],
   "source": [
    "# Set the style of seaborn\n",
    "sns.set(style='whitegrid')\n",
    "# Create a figure\n",
    "plt.figure(figsize=(10, 6))\n",
    "# Plot the histogram\n",
    "sns.histplot(df['trip_distance'], bins=30, kde=True, stat='density', color='blue', alpha=0.6)\n",
    "# Add labels and title\n",
    "plt.title('Probability Distribution of the Column')\n",
    "plt.xlabel('Value')\n",
    "plt.ylabel('Density')\n",
    "# Show the plot\n",
    "plt.show()\n",
    "\n",
    "print('mean: ', df['trip_distance'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "bfc1110d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.065612Z",
     "iopub.status.busy": "2025-07-01T13:24:41.065272Z",
     "iopub.status.idle": "2025-07-01T13:24:41.078876Z",
     "shell.execute_reply": "2025-07-01T13:24:41.077604Z"
    },
    "papermill": {
     "duration": 0.035227,
     "end_time": "2025-07-01T13:24:41.080375",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.045148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 0.3297925110928714\n",
      "p value: 0.37081618392570526\n",
      "Credit fare does not exceed cash fare for short distances\n"
     ]
    }
   ],
   "source": [
    "# 1(ii)a\n",
    "\n",
    "# Separating the groups (for short distances dist<=30)\n",
    "credit_fare_short = df[(df['payment_type']=='Card') & (df['trip_distance']<=30)]['fare_amount']\n",
    "cash_fare_short = df[(df['payment_type']=='Cash') & (df['trip_distance']<=30)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_short, cash_fare_short, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for short distances')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {1-alpha}% confidence for short distance(<=30)')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for short distances')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d25a8af5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.120440Z",
     "iopub.status.busy": "2025-07-01T13:24:41.120146Z",
     "iopub.status.idle": "2025-07-01T13:24:41.132894Z",
     "shell.execute_reply": "2025-07-01T13:24:41.131886Z"
    },
    "papermill": {
     "duration": 0.034447,
     "end_time": "2025-07-01T13:24:41.134401",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.099954",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 3.0862687935286286\n",
      "p value: 0.0010816450872503072\n",
      "Credit fare exceeds cash fare for long distances\n",
      "Credit card fares exceed cash fares by at least $10.4328434552518 with 0.95% confidence for long distance(>30)\n"
     ]
    }
   ],
   "source": [
    "# 1(ii)b\n",
    "\n",
    "# Separating the groups (for long distances dist>30)\n",
    "credit_fare_long = df[(df['payment_type']=='Card') & (df['trip_distance']>30)]['fare_amount']\n",
    "cash_fare_long = df[(df['payment_type']=='Cash') & (df['trip_distance']>30)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_long, cash_fare_long, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for long distances')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${result.confidence_interval().low} with {1-alpha}% confidence for long distance(>30)')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for long distances')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f40ec641",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.177961Z",
     "iopub.status.busy": "2025-07-01T13:24:41.177647Z",
     "iopub.status.idle": "2025-07-01T13:24:41.191612Z",
     "shell.execute_reply": "2025-07-01T13:24:41.190453Z"
    },
    "papermill": {
     "duration": 0.037375,
     "end_time": "2025-07-01T13:24:41.193105",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.155730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 3.5923257201313077\n",
      "p value: 0.00017045421393742285\n",
      "Credit fare exceeds cash fare for 4 seaters\n",
      "Credit card fares exceed cash fares by at least $6.500726196694953 with 95.0% confidence for 4 seaters\n"
     ]
    }
   ],
   "source": [
    "# 1(iii)a\n",
    "\n",
    "# Separating the groups (for passenger <= 4)\n",
    "credit_fare_small = df[(df['payment_type']=='Card') & (df['passenger_count']<=4)]['fare_amount']\n",
    "cash_fare_small = df[(df['payment_type']=='Cash') & (df['passenger_count']<=4)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_small, cash_fare_small, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for 4 seaters')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${result.confidence_interval().low} with {(1-alpha)*100}% confidence for 4 seaters')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for 4 seaters')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "2bcc7aee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.234607Z",
     "iopub.status.busy": "2025-07-01T13:24:41.234215Z",
     "iopub.status.idle": "2025-07-01T13:24:41.248656Z",
     "shell.execute_reply": "2025-07-01T13:24:41.247640Z"
    },
    "papermill": {
     "duration": 0.036759,
     "end_time": "2025-07-01T13:24:41.250161",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.213402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: -0.5253315007591002\n",
      "p value: 0.6996965375352782\n",
      "Credit fare does not exceed cash fare for large groups\n"
     ]
    }
   ],
   "source": [
    "# 1(iii)b\n",
    "\n",
    "# Separating the groups (for passenger > 4)\n",
    "credit_fare_large = df[(df['payment_type']=='Card') & (df['passenger_count']>4)]['fare_amount']\n",
    "cash_fare_large = df[(df['payment_type']=='Cash') & (df['passenger_count']>4)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_large, cash_fare_large, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for large groups')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {(1-alpha)*100}% confidence for large taxis')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for large groups')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5b600bc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.291370Z",
     "iopub.status.busy": "2025-07-01T13:24:41.291025Z",
     "iopub.status.idle": "2025-07-01T13:24:41.307253Z",
     "shell.execute_reply": "2025-07-01T13:24:41.306153Z"
    },
    "papermill": {
     "duration": 0.038887,
     "end_time": "2025-07-01T13:24:41.309113",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.270226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 0.38451049658216135\n",
      "p value: 0.3503488544731475\n",
      "Credit fare does not exceed cash fare for short distance travel in 4 seaters\n"
     ]
    }
   ],
   "source": [
    "# 1(iv)a\n",
    "\n",
    "# Separating the groups (for short distance and passenger <= 4)\n",
    "credit_fare_short_small = df[(df['payment_type']=='Card') & (df['trip_distance']<=30) & (df['passenger_count']<=4)]['fare_amount']\n",
    "cash_fare_short_small = df[(df['payment_type']=='Cash') & (df['trip_distance']<=30) & (df['passenger_count']<=4)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_short_small, cash_fare_short_small, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for short distance travel in 4 seaters')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {(1-alpha)*100}% confidence for short distance travel in 4 seaters')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for short distance travel in 4 seaters')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e24ea42f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.350707Z",
     "iopub.status.busy": "2025-07-01T13:24:41.350313Z",
     "iopub.status.idle": "2025-07-01T13:24:41.364823Z",
     "shell.execute_reply": "2025-07-01T13:24:41.363667Z"
    },
    "papermill": {
     "duration": 0.037037,
     "end_time": "2025-07-01T13:24:41.366358",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.329321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 2.930672284673706\n",
      "p value: 0.0017906114335226146\n",
      "Credit fare exceeds cash fare for long distance travel in 4 seaters\n",
      "Credit card fares exceed cash fares by at least $9.693447477861222 with 95.0% confidence for long distance travel in 4 seaters\n"
     ]
    }
   ],
   "source": [
    "# 1(iv)b\n",
    "\n",
    "# Separating the groups (for long distance and passenger <= 4)\n",
    "credit_fare_long_small = df[(df['payment_type']=='Card') & (df['trip_distance']>30) & (df['passenger_count']<=4)]['fare_amount']\n",
    "cash_fare_long_small = df[(df['payment_type']=='Cash') & (df['trip_distance']>30) & (df['passenger_count']<=4)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_long_small, cash_fare_long_small, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for long distance travel in 4 seaters')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {(1-alpha)*100}% confidence for long distance travel in 4 seaters')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for long distance travel in 4 seaters')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "dd7caa58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.408447Z",
     "iopub.status.busy": "2025-07-01T13:24:41.408059Z",
     "iopub.status.idle": "2025-07-01T13:24:41.423962Z",
     "shell.execute_reply": "2025-07-01T13:24:41.422771Z"
    },
    "papermill": {
     "duration": 0.038738,
     "end_time": "2025-07-01T13:24:41.425566",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.386828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: -0.0893844827944221\n",
      "p value: 0.535485405929322\n",
      "Credit fare does not exceed cash fare for short distance travel in large groups\n"
     ]
    }
   ],
   "source": [
    "# 1(iv)c\n",
    "\n",
    "# Separating the groups (for short distance and passenger > 4)\n",
    "credit_fare_short_large = df[(df['payment_type']=='Card') & (df['trip_distance']<=30) & (df['passenger_count']>4)]['fare_amount']\n",
    "cash_fare_short_large = df[(df['payment_type']=='Cash') & (df['trip_distance']<=30) & (df['passenger_count']>4)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_short_large, cash_fare_short_large, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for short distance travel in large groups')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {(1-alpha)*100}% confidence for short distance travel in large groups')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for short distance travel in large groups')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "61fa219f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.467492Z",
     "iopub.status.busy": "2025-07-01T13:24:41.467003Z",
     "iopub.status.idle": "2025-07-01T13:24:41.483833Z",
     "shell.execute_reply": "2025-07-01T13:24:41.482800Z"
    },
    "papermill": {
     "duration": 0.039579,
     "end_time": "2025-07-01T13:24:41.485381",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.445802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T statistic: 0.32593684599577544\n",
      "p value: 0.374072111633944\n",
      "Credit fare does not exceed cash fare for long distance travel in large groups\n"
     ]
    }
   ],
   "source": [
    "# 1(iv)d\n",
    "\n",
    "# Separating the groups (for long distance and passenger > 4)\n",
    "credit_fare_short_small = df[(df['payment_type']=='Card') & (df['trip_distance']>30) & (df['passenger_count']>4)]['fare_amount']\n",
    "cash_fare_short_small = df[(df['payment_type']=='Cash') & (df['trip_distance']>30) & (df['passenger_count']>4)]['fare_amount']\n",
    "\n",
    "# Performing Welch's T Test 2 way, greater\n",
    "result = st.ttest_ind(credit_fare_short_small, cash_fare_short_small, \n",
    "                      equal_var=False, alternative='greater')\n",
    "\n",
    "alpha = 0.05\n",
    "ci = result.confidence_interval(confidence_level=(1-alpha))\n",
    "\n",
    "print(f'T statistic: {result.statistic}')\n",
    "print(f'p value: {result.pvalue}')\n",
    "\n",
    "if result.pvalue < alpha:\n",
    "    print('Credit fare exceeds cash fare for long distance travel in large groups')\n",
    "    print(f'Credit card fares exceed cash fares by at least ${ci.low} with {(1-alpha)*100}% confidence for short distance travel in large groups')\n",
    "else:\n",
    "    print('Credit fare does not exceed cash fare for long distance travel in large groups')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "4309b944",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T13:24:41.527185Z",
     "iopub.status.busy": "2025-07-01T13:24:41.526495Z",
     "iopub.status.idle": "2025-07-01T13:24:41.539791Z",
     "shell.execute_reply": "2025-07-01T13:24:41.538948Z"
    },
    "papermill": {
     "duration": 0.035985,
     "end_time": "2025-07-01T13:24:41.541149",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.505164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1365</th>\n",
       "      <td>1</td>\n",
       "      <td>21.40</td>\n",
       "      <td>Card</td>\n",
       "      <td>92.8</td>\n",
       "      <td>120.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4879</th>\n",
       "      <td>1</td>\n",
       "      <td>25.42</td>\n",
       "      <td>Card</td>\n",
       "      <td>115.5</td>\n",
       "      <td>137.633333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15716</th>\n",
       "      <td>1</td>\n",
       "      <td>12.40</td>\n",
       "      <td>Card</td>\n",
       "      <td>67.0</td>\n",
       "      <td>95.983333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24505</th>\n",
       "      <td>1</td>\n",
       "      <td>34.20</td>\n",
       "      <td>Cash</td>\n",
       "      <td>139.5</td>\n",
       "      <td>179.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26670</th>\n",
       "      <td>1</td>\n",
       "      <td>15.44</td>\n",
       "      <td>Cash</td>\n",
       "      <td>76.0</td>\n",
       "      <td>1030.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12588809</th>\n",
       "      <td>3</td>\n",
       "      <td>17.60</td>\n",
       "      <td>Cash</td>\n",
       "      <td>67.5</td>\n",
       "      <td>114.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12589240</th>\n",
       "      <td>1</td>\n",
       "      <td>21.06</td>\n",
       "      <td>Cash</td>\n",
       "      <td>80.0</td>\n",
       "      <td>135.216667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12606409</th>\n",
       "      <td>2</td>\n",
       "      <td>39.38</td>\n",
       "      <td>Cash</td>\n",
       "      <td>159.5</td>\n",
       "      <td>81.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12656947</th>\n",
       "      <td>1</td>\n",
       "      <td>13.40</td>\n",
       "      <td>Card</td>\n",
       "      <td>89.5</td>\n",
       "      <td>109.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12731359</th>\n",
       "      <td>1</td>\n",
       "      <td>15.60</td>\n",
       "      <td>Cash</td>\n",
       "      <td>66.0</td>\n",
       "      <td>90.450000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1335 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          passenger_count  trip_distance payment_type  fare_amount  \\\n",
       "1365                    1          21.40         Card         92.8   \n",
       "4879                    1          25.42         Card        115.5   \n",
       "15716                   1          12.40         Card         67.0   \n",
       "24505                   1          34.20         Cash        139.5   \n",
       "26670                   1          15.44         Cash         76.0   \n",
       "...                   ...            ...          ...          ...   \n",
       "12588809                3          17.60         Cash         67.5   \n",
       "12589240                1          21.06         Cash         80.0   \n",
       "12606409                2          39.38         Cash        159.5   \n",
       "12656947                1          13.40         Card         89.5   \n",
       "12731359                1          15.60         Cash         66.0   \n",
       "\n",
       "             duration  \n",
       "1365       120.916667  \n",
       "4879       137.633333  \n",
       "15716       95.983333  \n",
       "24505      179.466667  \n",
       "26670     1030.800000  \n",
       "...               ...  \n",
       "12588809   114.833333  \n",
       "12589240   135.216667  \n",
       "12606409    81.466667  \n",
       "12656947   109.150000  \n",
       "12731359    90.450000  \n",
       "\n",
       "[1335 rows x 5 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b837b189",
   "metadata": {
    "papermill": {
     "duration": 0.0205,
     "end_time": "2025-07-01T13:24:41.582619",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.562119",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66f48003",
   "metadata": {
    "papermill": {
     "duration": 0.020492,
     "end_time": "2025-07-01T13:24:41.624057",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.603565",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Credit paying customers leads to high fares than cash paying customers in general. \n",
    "\n",
    "## Most amount of credit paying customers are single customers and for long distances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4baae4a",
   "metadata": {
    "papermill": {
     "duration": 0.020505,
     "end_time": "2025-07-01T13:24:41.665626",
     "exception": false,
     "start_time": "2025-07-01T13:24:41.645121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1777799,
     "sourceId": 2905525,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 114.007025,
   "end_time": "2025-07-01T13:24:43.111927",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-01T13:22:49.104902",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
